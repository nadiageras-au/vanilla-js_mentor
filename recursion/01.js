// Область видимости, лексическое окружение (scope, lexical environment) в программировании определяет доступность переменных,
//     функций и других именованных сущностей внутри кода.
//     Глобальная область видимости (Global Scope):
//     Локальная область видимости ( Local Scope):

//какие структуры данных создают область видимости
//function/class, if/else, loops, try/catch/finally, switch, anonymous code

//Замыкание (closure) - это способность функции запоминать ее лексическое окружение, в котором она была создана,
// (инициализирована, определена) и хранить в себе ссылку(доступ) на переменные из внешней области видимости, даже после того, как эта
// функция была вызвана и завершила своё выполнение
// Замыкание — это функция, у которой есть доступ к области видимости, сформированной внешней по отношению к ней функции
// даже после того, как эта внешняя функция завершила работу.
// - способность функции взаимодействовать с переменными внешнего окружения

// пример замыкания
// function createCounter() {
//     let count = 0;
//     function increment() {
//         count++;
//         console.log(count);
//     }
//     return increment;
// }
//
// const counter = createCounter();
// counter(); // Выводит 1
// counter(); // Выводит 2

//Инициализация переменной —
// присваивание начального значения переменной в момент объявления.


// let, const - блочная область видимости
// var - функциональная область видимости

//________пример 1 - разница между let и var
//s
// function foo() {
//
//     if(true) {
//         var b = 4
//     }
//     function bar() {
//         console.log(b);
//     }
//      bar();
// }
//
// foo()

//________пример 2 - разница между let и var
// function testVarInLoop() {
//
//     for (var i = 0; i < 3; i++) {
//         setTimeout(function () {
//             console.log(i);
//         }, 1000);
//     }
// }
//
// testVarInLoop(); // Что будет выведено?

//________пример 3 - особенность var, "use strict"
// позволяла случайно переопределить переменную на глобальном уровне
// let a = 10
// function f() {
//     console.log(a)
//     d = 100
// }
// f();
// console.log(d)

//________пример 4 - временная мертвая зона Temporal Dead Zone (TDZ)
// Когда в 4 строке пытаемся вывести num в консоль, возникает исключение ReferenceError. Функция уже знает о локальной num,
// которая остается непроинициализированной до 6 строки — попали во «временную мертвую зону».
// Temporal Dead Zone (TDZ) — это период времени между объявлением переменной и инициализацией значением,
//  в течение которого к переменной нельзя получить доступ (касается только переменных, объявленных при помощи let и const).
// Здесь выполнение функции прерывается, и, так как исключение никак не обработали, дальше код выполняться не будет.
// Зачем это нужно
// Наличие «мертвой зоны» помогает писать последовательный и предсказуемый код — это уменьшает вероятность ошибок и
// улучшает читаемость кода.
// let num = 10
//
// function showNum() {
//     console.log(num);
//
//     let num = 20;
//
//     console.log(num)
// }
//
// showNum()
"use strict"
console.log(foo(2));

function foo(a){return a*a}